# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'photo_processing.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
# Form implementation generated from reading ui file 'photo_processing.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
# import cv2
from MedMamba_snc import VSSM as medmamba_snc
from MedMamba_tnc import VSSM as medmamba_tnc
from MedMamba_bnc import VSSM as medmamba_bnc
import matplotlib.pyplot as plt
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import torch
import torchvision.transforms as transforms
import os #显示文件上级路径
from tkinter import Image
from PIL import Image, ImageFilter
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon, QPixmap, QPainter, QPalette, QBrush, QImageReader
from PyQt5.QtWidgets import QSizePolicy, QFileDialog, QLabel, QVBoxLayout, QMessageBox, QApplication, QWidget
# import matplotlib.pyplot as plt
# import matplotlib

# # 设置 Matplotlib 使用支持中文的字体（如 SimHei）
# matplotlib.rcParams['font.sans-serif'] = ['SimHei']  # 黑体
# matplotlib.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题


# 预处理方法
def rgb_gaussian(image):
    """使用 PIL 进行 RGB 高斯模糊"""
    return image.filter(ImageFilter.GaussianBlur(radius=1.5))

def rgb_identity(image):
    """只裁剪"""
    return image


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(2500, 1500)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(500, 20, 1500, 80))
        self.textBrowser_2.setStyleSheet("QTextBrowser {\n"
"    background: transparent;  /* 设置背景透明 */\n"
"    border: none;  /* 去除边框 */\n"
"}")
        self.textBrowser_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textBrowser_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textBrowser_2.setLineWidth(0)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 90, 2460, 1360))
        self.tabWidget.setStyleSheet("::tab {\n"
"    font-size: 12pt;  /* 字体大小 */\n"
"    border-radius: 20px;  /* 圆角 */\n"
"    height: 50px;  /* 高度 */\n"
"    width: 300px;  /* 宽度 */\n"
"    background: transparent;  /* 背景透明 */\n"
"    border: 2px solid #5A6B7B;  /* 设置边框 */\n"
"}\n"
"\n"
"::tab:selected {\n"
"    background: #A4B8C6;  /* 选中时的背景颜色 */\n"
"    border: 2px solid #5A6B7B;  /* 选中时的边框颜色 */\n"
"    font-weight: bold;  /* 选中时字体加粗 */\n"
"}\n"
"")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.line = QtWidgets.QFrame(self.tab_1)
        self.line.setGeometry(QtCore.QRect(20, 290, 2420, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_1)
        self.pushButton_7.setGeometry(QtCore.QRect(2220, 690, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab_1)
        self.pushButton_8.setGeometry(QtCore.QRect(2220, 800, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.layoutWidget = QtWidgets.QWidget(self.tab_1)
        self.layoutWidget.setGeometry(QtCore.QRect(21, 13, 2421, 171))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.progressBar = QtWidgets.QProgressBar(self.layoutWidget)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout.addWidget(self.progressBar)
        self.gridLayout_3.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_2.addWidget(self.lineEdit_3)
        self.pushButton_5 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_2.addWidget(self.pushButton_6)
        self.progressBar_2 = QtWidgets.QProgressBar(self.layoutWidget)
        self.progressBar_2.setProperty("value", 24)
        self.progressBar_2.setObjectName("progressBar_2")
        self.horizontalLayout_2.addWidget(self.progressBar_2)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_6.addWidget(self.lineEdit_5)
        self.pushButton_16 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setObjectName("pushButton_16")
        self.horizontalLayout_6.addWidget(self.pushButton_16)
        self.pushButton_17 = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setObjectName("pushButton_17")
        self.horizontalLayout_6.addWidget(self.pushButton_17)
        self.progressBar_4 = QtWidgets.QProgressBar(self.layoutWidget)
        self.progressBar_4.setProperty("value", 24)
        self.progressBar_4.setObjectName("progressBar_4")
        self.horizontalLayout_6.addWidget(self.progressBar_4)
        self.gridLayout_3.addLayout(self.horizontalLayout_6, 2, 0, 1, 1)
        self.layoutWidget1 = QtWidgets.QWidget(self.tab_1)
        self.layoutWidget1.setGeometry(QtCore.QRect(50, 710, 301, 141))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget1)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_15 = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setObjectName("pushButton_15")
        self.gridLayout.addWidget(self.pushButton_15, 0, 0, 1, 1)
        self.layoutWidget2 = QtWidgets.QWidget(self.tab_1)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 190, 821, 101))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.layoutWidget2)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_14 = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_13.addWidget(self.label_14)
        self.progressBar_5 = QtWidgets.QProgressBar(self.layoutWidget2)
        self.progressBar_5.setProperty("value", 24)
        self.progressBar_5.setObjectName("progressBar_5")
        self.horizontalLayout_13.addWidget(self.progressBar_5)
        self.gridLayout_6.addLayout(self.horizontalLayout_13, 0, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout_6.addWidget(self.label, 1, 0, 1, 1)
        self.layoutWidget3 = QtWidgets.QWidget(self.tab_1)
        self.layoutWidget3.setGeometry(QtCore.QRect(400, 340, 1781, 921))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.layoutWidget3)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget3)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_7.addWidget(self.label_2, 0, 0, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget3)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_7.addWidget(self.label_3, 0, 1, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.scrollArea = QtWidgets.QScrollArea(self.layoutWidget3)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 885, 891))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_7.addWidget(self.scrollArea, 1, 0, 1, 1)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.layoutWidget3)
        self.scrollArea_2.setEnabled(True)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 884, 891))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.gridLayout_7.addWidget(self.scrollArea_2, 1, 1, 1, 1)
        self.layoutWidget.raise_()
        self.layoutWidget.raise_()
        self.layoutWidget.raise_()
        self.line.raise_()
        self.pushButton_7.raise_()
        self.pushButton_8.raise_()
        self.layoutWidget.raise_()
        self.tabWidget.addTab(self.tab_1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.line_5 = QtWidgets.QFrame(self.tab_2)
        self.line_5.setGeometry(QtCore.QRect(20, 130, 2420, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.layoutWidget4 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget4.setGeometry(QtCore.QRect(40, 30, 741, 101))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.layoutWidget4)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget4)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_4.addWidget(self.label_5)
        self.progressBar_3 = QtWidgets.QProgressBar(self.layoutWidget4)
        self.progressBar_3.setProperty("value", 24)
        self.progressBar_3.setObjectName("progressBar_3")
        self.horizontalLayout_4.addWidget(self.progressBar_3)
        self.gridLayout_4.addLayout(self.horizontalLayout_4, 0, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget4)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_4.addWidget(self.label_4, 1, 0, 1, 1)
        self.layoutWidget5 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget5.setGeometry(QtCore.QRect(60, 180, 1531, 1081))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.layoutWidget5)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_8 = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("")
        self.label_8.setObjectName("label_8")
        self.gridLayout_8.addWidget(self.label_8, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.label_16 = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.gridLayout_8.addWidget(self.label_16, 0, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.scrollArea_3 = QtWidgets.QScrollArea(self.layoutWidget5)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 607, 509))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.gridLayout_8.addWidget(self.scrollArea_3, 1, 0, 1, 1)
        self.scrollArea_7 = QtWidgets.QScrollArea(self.layoutWidget5)
        self.scrollArea_7.setWidgetResizable(True)
        self.scrollArea_7.setObjectName("scrollArea_7")
        self.scrollAreaWidgetContents_7 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_7.setGeometry(QtCore.QRect(0, 0, 912, 509))
        self.scrollAreaWidgetContents_7.setObjectName("scrollAreaWidgetContents_7")
        self.scrollArea_7.setWidget(self.scrollAreaWidgetContents_7)
        self.gridLayout_8.addWidget(self.scrollArea_7, 1, 1, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.gridLayout_8.addWidget(self.label_15, 2, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.label_17 = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.gridLayout_8.addWidget(self.label_17, 2, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.scrollArea_6 = QtWidgets.QScrollArea(self.layoutWidget5)
        self.scrollArea_6.setWidgetResizable(True)
        self.scrollArea_6.setObjectName("scrollArea_6")
        self.scrollAreaWidgetContents_6 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_6.setGeometry(QtCore.QRect(0, 0, 607, 508))
        self.scrollAreaWidgetContents_6.setObjectName("scrollAreaWidgetContents_6")
        self.scrollArea_6.setWidget(self.scrollAreaWidgetContents_6)
        self.gridLayout_8.addWidget(self.scrollArea_6, 3, 0, 1, 1)
        self.scrollArea_4 = QtWidgets.QScrollArea(self.layoutWidget5)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 912, 508))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.gridLayout_8.addWidget(self.scrollArea_4, 3, 1, 1, 1)
        self.gridLayout_8.setColumnStretch(0, 2)
        self.gridLayout_8.setColumnStretch(1, 3)
        self.layoutWidget6 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget6.setGeometry(QtCore.QRect(1650, 180, 741, 801))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget6)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_18 = QtWidgets.QLabel(self.layoutWidget6)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.verticalLayout.addWidget(self.label_18, 0, QtCore.Qt.AlignHCenter)
        self.textEdit = QtWidgets.QTextEdit(self.layoutWidget6)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)
        self.layoutWidget7 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget7.setGeometry(QtCore.QRect(1650, 1020, 741, 241))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget7)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_13 = QtWidgets.QPushButton(self.layoutWidget7)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.verticalLayout_2.addWidget(self.pushButton_13)
        self.pushButton_14 = QtWidgets.QPushButton(self.layoutWidget7)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setObjectName("pushButton_14")
        self.verticalLayout_2.addWidget(self.pushButton_14)
        self.pushButton_19 = QtWidgets.QPushButton(self.layoutWidget7)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_19.setFont(font)
        self.pushButton_19.setObjectName("pushButton_19")
        self.verticalLayout_2.addWidget(self.pushButton_19)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_2.setGeometry(QtCore.QRect(1300, 90, 1091, 1141))
        self.textEdit_2.setObjectName("textEdit_2")
        self.scrollArea_5 = QtWidgets.QScrollArea(self.tab_3)
        self.scrollArea_5.setGeometry(QtCore.QRect(90, 90, 1140, 1140))
        self.scrollArea_5.setWidgetResizable(True)
        self.scrollArea_5.setObjectName("scrollArea_5")
        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, 0, 1138, 1138))
        self.scrollAreaWidgetContents_5.setObjectName("scrollAreaWidgetContents_5")
        self.scrollArea_5.setWidget(self.scrollAreaWidgetContents_5)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 320, 2420, 351))
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton.setGeometry(QtCore.QRect(2250, 280, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.layoutWidget8 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget8.setGeometry(QtCore.QRect(20, 39, 2381, 221))
        self.layoutWidget8.setObjectName("layoutWidget8")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.layoutWidget8)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_13 = QtWidgets.QLabel(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_12.addWidget(self.label_13)
        self.lineEdit_17 = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.horizontalLayout_12.addWidget(self.lineEdit_17)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_12.addWidget(self.pushButton_2)
        self.gridLayout_5.addLayout(self.horizontalLayout_12, 4, 0, 1, 1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_6 = QtWidgets.QLabel(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_5.addWidget(self.label_6)
        self.lineEdit_15 = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.horizontalLayout_5.addWidget(self.lineEdit_15)
        self.pushButton_20 = QtWidgets.QPushButton(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_20.setFont(font)
        self.pushButton_20.setObjectName("pushButton_20")
        self.horizontalLayout_5.addWidget(self.pushButton_20)
        self.gridLayout_5.addLayout(self.horizontalLayout_5, 2, 0, 1, 1)
        self.line_6 = QtWidgets.QFrame(self.layoutWidget8)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.gridLayout_5.addWidget(self.line_6, 1, 0, 1, 1)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_7 = QtWidgets.QLabel(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_7.addWidget(self.label_7)
        self.lineEdit_16 = QtWidgets.QLineEdit(self.layoutWidget8)
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.horizontalLayout_7.addWidget(self.lineEdit_16)
        self.pushButton_1 = QtWidgets.QPushButton(self.layoutWidget8)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setObjectName("pushButton_1")
        self.horizontalLayout_7.addWidget(self.pushButton_1)
        self.gridLayout_5.addLayout(self.horizontalLayout_7, 0, 0, 1, 1)
        self.line_7 = QtWidgets.QFrame(self.layoutWidget8)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.gridLayout_5.addWidget(self.line_7, 3, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(20, 20, 2420, 271))
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget9 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget9.setGeometry(QtCore.QRect(21, 31, 2381, 231))
        self.layoutWidget9.setObjectName("layoutWidget9")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.layoutWidget9)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.line_3 = QtWidgets.QFrame(self.layoutWidget9)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.gridLayout_2.addWidget(self.line_3, 3, 0, 1, 1)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_8.addWidget(self.label_9)
        self.radioButton = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setAutoExclusive(True)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout_8.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setChecked(True)
        self.radioButton_2.setAutoExclusive(True)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_8.addWidget(self.radioButton_2)
        self.gridLayout_2.addLayout(self.horizontalLayout_8, 0, 0, 1, 1)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_11 = QtWidgets.QLabel(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_10.addWidget(self.label_11)
        self.radioButton_3 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setAutoExclusive(True)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout_10.addWidget(self.radioButton_3)
        self.radioButton_4 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setAutoExclusive(True)
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_10.addWidget(self.radioButton_4)
        self.radioButton_5 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setChecked(False)
        self.radioButton_5.setAutoExclusive(True)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_10.addWidget(self.radioButton_5)
        self.gridLayout_2.addLayout(self.horizontalLayout_10, 4, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.layoutWidget9)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout_2.addWidget(self.line_2, 1, 0, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_10 = QtWidgets.QLabel(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_9.addWidget(self.label_10)
        self.label_19 = QtWidgets.QLabel(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_9.addWidget(self.label_19)
        self.horizontalSlider = QtWidgets.QSlider(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.horizontalSlider.setFont(font)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setSingleStep(1)
        self.horizontalSlider.setProperty("value", 90)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout_9.addWidget(self.horizontalSlider)
        self.gridLayout_2.addLayout(self.horizontalLayout_9, 2, 0, 1, 1)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_12 = QtWidgets.QLabel(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_11.addWidget(self.label_12)
        self.radioButton_9 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_9.setFont(font)
        self.radioButton_9.setObjectName("radioButton_9")
        self.horizontalLayout_11.addWidget(self.radioButton_9)
        self.radioButton_8 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_8.setFont(font)
        self.radioButton_8.setObjectName("radioButton_8")
        self.horizontalLayout_11.addWidget(self.radioButton_8)
        self.radioButton_10 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_10.setFont(font)
        self.radioButton_10.setChecked(True)
        self.radioButton_10.setObjectName("radioButton_10")
        self.horizontalLayout_11.addWidget(self.radioButton_10)
        self.radioButton_11 = QtWidgets.QRadioButton(self.layoutWidget9)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_11.setFont(font)
        self.radioButton_11.setObjectName("radioButton_11")
        self.horizontalLayout_11.addWidget(self.radioButton_11)
        self.gridLayout_2.addLayout(self.horizontalLayout_11, 6, 0, 1, 1)
        self.line_4 = QtWidgets.QFrame(self.layoutWidget9)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.gridLayout_2.addWidget(self.line_4, 5, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2500, 21))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        # 初始化进度条
        self.progressBar.setValue(0)
        self.progressBar_2.setValue(0)
        self.progressBar_3.setValue(0)
        self.progressBar_4.setValue(0)
        self.progressBar_5.setValue(0)

        # 添加背景图片
        mainWindow.setStyleSheet(
                "#centralwidget{border-image:url(./background.jpg);}")
        # self.scrollArea.setStyleSheet("border-image:url(M:/各类比赛/服务外包创新创业大赛/程序/pyqt-1/background.jpg);")
        self.scrollArea.setStyleSheet(
                "background-image:url(./background.jpg);")
        self.scrollArea_2.setStyleSheet(
                "background-image:url(./background.jpg);")
        self.scrollAreaWidgetContents_3.setStyleSheet("background: transparent;")
        self.scrollArea_3.setStyleSheet(
                "background-image:url(./background.jpg) no-repeat;")
        # 设置内部控件的背景为透明
        self.scrollAreaWidgetContents_4.setStyleSheet("background: transparent;")
        self.scrollArea_4.setStyleSheet(
                "background-image:url(./background.jpg);")
        self.scrollAreaWidgetContents_5.setStyleSheet("background: transparent;")
        self.scrollArea_5.setStyleSheet(
                "background-image:url(./background.jpg);")
        self.scrollAreaWidgetContents_6.setStyleSheet("background: transparent;")
        self.scrollArea_6.setStyleSheet(
                "background-image:url(./background.jpg);")
        self.scrollAreaWidgetContents_7.setStyleSheet("background: transparent;")
        self.scrollArea_7.setStyleSheet(
                "background-image:url(./background.jpg);")

        # 连接信号和槽
        self.pushButton_3.clicked.connect(self.on_pushButton_3_clicked)  # 选择文件夹
        self.pushButton_4.clicked.connect(self.on_pushButton_4_clicked)  # 检测文件夹
        self.pushButton_5.clicked.connect(self.on_pushButton_5_clicked)
        self.pushButton_6.clicked.connect(self.on_pushButton_6_clicked)
        self.pushButton_16.clicked.connect(self.on_pushButton_16_clicked)
        self.pushButton_17.clicked.connect(self.on_pushButton_17_clicked)
        self.pushButton_1.clicked.connect(self.on_pushButton_1_clicked)
        self.pushButton_20.clicked.connect(self.on_pushButton_20_clicked)
        self.pushButton_7.clicked.connect(self.on_pushButton_7_clicked)
        self.pushButton_8.clicked.connect(self.on_pushButton_8_clicked)
        self.pushButton_2.clicked.connect(self.on_pushButton_2_clicked)
        # 设置区保存按钮
        self.pushButton.clicked.connect(self.on_pushButton_clicked)
        # 阈值选择
        self.horizontalSlider.valueChanged.connect(self.update_label_19)
        # self.button_group_3.buttonClicked.connect(self.on_preprocessing_method_selected)
        # 预处理按钮
        self.pushButton_15.clicked.connect(self.on_pushButton_15_clicked)
        # 上一组下一组按钮
        self.pushButton_13.clicked.connect(self.on_pushButton_13_clicked)
        self.pushButton_14.clicked.connect(self.on_pushButton_14_clicked)

        # 注释运行
        self.pushButton_19.clicked.connect(self.on_pushButton_19_clicked)

        # 是否使用GPU
        self.button_group_1 = QtWidgets.QButtonGroup(mainWindow)
        self.button_group_1.addButton(self.radioButton)
        self.button_group_1.addButton(self.radioButton_2)

        # 模型大小
        self.button_group_2 = QtWidgets.QButtonGroup(mainWindow)
        self.button_group_2.addButton(self.radioButton_3)
        self.button_group_2.addButton(self.radioButton_4)
        self.button_group_2.addButton(self.radioButton_5)

        # 均衡化处理方式
        self.button_group_3 = QtWidgets.QButtonGroup(mainWindow)
        self.button_group_3.addButton(self.radioButton_8)
        self.button_group_3.addButton(self.radioButton_9)
        self.button_group_3.addButton(self.radioButton_10)
        self.button_group_3.addButton(self.radioButton_11)

        # 设置radiobutton的默认选择
        self.radioButton.setChecked(True)
        self.radioButton_4.setChecked(True)

        # 初始化 label_19 的内容
        self.update_label_19(self.horizontalSlider.value())

        self.horizontalSlider.setValue(50)

        def ensure_directory_exists(path):
                if not os.path.exists(path):
                        os.makedirs(path)

        # 设置默认路径
        path_16 = "./OutPut/预处理结果"
        path_15 = "./OutPut/疾病检测报告"

        # 确保目录存在
        ensure_directory_exists(path_16)
        ensure_directory_exists(path_15)

        self.lineEdit_16.setPlaceholderText("Enter your address here...")  # 设置占位符文本
        self.lineEdit_16.setText(path_16)  # 设置默认地址

        self.lineEdit_15.setPlaceholderText("Enter your address here...")  # 设置占位符文本
        self.lineEdit_15.setText(path_15)  # 设置默认地址

        # 预处理方法字典
        self.processing_methods = {
                self.radioButton_8: rgb_identity,
                self.radioButton_9: rgb_identity,
                self.radioButton_10: rgb_gaussian,
                self.radioButton_11: rgb_gaussian,
        }

        self.processed_files = []

        self.button_group_2.buttonClicked.connect(self.update_lineEdit_17)

        # 设置初始地址和模型
        self.update_lineEdit_17()

        # 注释运行
        # self.model = self.select_model()

    def update_lineEdit_17(self):
            if self.radioButton_3.isChecked():
                    self.lineEdit_17.setText("./medmamba_fold_0_checkpoint.pth")
            elif self.radioButton_4.isChecked():
                    self.lineEdit_17.setText("./medmamba_fold_0_checkpoint.pth")
            elif self.radioButton_5.isChecked():
                    self.lineEdit_17.setText("./medmamba_fold_0_checkpoint.pth")

    # 注释运行
    def select_model(self, num_classes=8):
            if self.radioButton_3.isChecked():
                    model_type = "medmamba_tnc"
                    return medmamba_tnc(num_classes=num_classes)
            elif self.radioButton_4.isChecked():
                    model_type = "medmamba_snc"
                    return medmamba_snc(num_classes=num_classes)
            elif self.radioButton_5.isChecked():
                    model_type = "medmamba_bnc"
                    return medmamba_bnc(num_classes=num_classes)
            else:
                    raise ValueError("No model type selected")

    def on_pushButton_19_clicked(self):
            """点击按钮后执行的函数，用于加载模型并生成报告"""
            # 获取用户输入的路径和选项
            model_path = self.lineEdit_17.text().strip()  # 模型路径
            image_folder = self.lineEdit_16.text().strip()  # 图片文件夹路径
            output_folder = self.lineEdit_15.text().strip()  # 报告输出路径
            threshold = self.horizontalSlider.value() / 100  # 阈值

            # 检查无效路径
            file_paths = {
                    "预处理结果路径": image_folder,
                    "疾病检测报告路径": output_folder,
                    "模型保存路径": model_path
            }
            invalid_paths = {name: path for name, path in file_paths.items() if not path or not os.path.exists(path)}

            if invalid_paths:
                    error_message = "以下路径无效:\n" + "\n".join(
                            [f"{name}: {path}" for name, path in invalid_paths.items()])
                    QtWidgets.QMessageBox.warning(None, "错误", error_message)
                    return

            # 读取所有图片路径并按编号分组
            image_paths = [os.path.join(image_folder, f) for f in os.listdir(image_folder) if
                           f.endswith(('.jpg', '.jpeg', '.png'))]
            image_groups = {}
            for image_path in image_paths:
                    base_name = os.path.basename(image_path)
                    number = base_name.split('_')[0]  # 按编号分组
                    if number not in image_groups:
                            image_groups[number] = []
                    image_groups[number].append(image_path)

            if not image_groups:
                    QtWidgets.QMessageBox.warning(None, "错误", "未找到可用的图片")
                    return

            # 初始化进度条
            self.set_loader()
            self.progressBar_3.setValue(0)
            total_images = len(image_paths)
            processed_images = 0

            # 选择模型
            try:
                    model = self.select_model()
            except ValueError as e:
                    QtWidgets.QMessageBox.warning(None, "错误", str(e))
                    return

            # 设备选择
            use_gpu = self.radioButton.isChecked()
            device = torch.device("cuda:0" if use_gpu and torch.cuda.is_available() else "cpu")
            model.to(device)

            # 加载模型参数
            checkpoint = torch.load(model_path, map_location=device)
            model.load_state_dict(checkpoint['model_state_dict'])
            model.eval()

            # 处理所有图片，生成直方图
            histogram_paths = []
            text_results = []
            normal_count = 0
            sick_count = 0
            class_counts = {class_name: 0 for class_name in ['A', 'C', 'D', 'G', 'H', 'M', 'N', 'O']}  # 初始化类别统计

            for img_path in image_paths:
                    result_classes, probabilities = self.process_image(img_path)
                    histogram_path = self.analyze_image(img_path, probabilities, output_folder)
                    histogram_paths.append(histogram_path)

                    # 记录检测结果
                    if not result_classes or 'N' in result_classes:
                            normal_count += 1
                    else:
                            sick_count += 1
                            for class_name in result_classes:
                                    if class_name in class_counts:
                                            class_counts[class_name] += 1

                    text_results.append(
                            f"{os.path.basename(img_path)}: {', '.join(result_classes) if result_classes else '正常'}")

                    # 更新进度条
                    processed_images += 1
                    progress = int((processed_images / total_images) * 100)
                    self.current_progress_bar = 3
                    self.progressBar_3.setValue(progress)
                    QtWidgets.QApplication.processEvents()

            # 统计总人数
            total_count = normal_count + sick_count

            # 生成统计图表
            image_paths = [
                    os.path.join(output_folder, "summary_chart.png"),
                    os.path.join(output_folder, "class_summary_chart.png"),
                    os.path.join(output_folder, "disease_summary_chart.png")
            ]

            self.generate_summary_chart1(normal_count, sick_count, total_count, output_folder)
            self.generate_summary_chart2(class_counts, output_folder)
            self.generate_summary_chart3(image_groups, list(class_counts.keys()), output_folder)

            # 生成统计文字信息
            summary_text = (
                    f"【统计报告】\n"
                    f"1. **总体统计**\n"
                    f"   - 正常人数: {normal_count}\n"
                    f"   - 得病人数: {sick_count}\n"
                    f"   - 总检测人数: {total_count}\n\n"
                    f"2. **各类疾病分布**\n"
            )

            for class_name, count in class_counts.items():
                    summary_text += f"   - {class_name}: {count} 人\n"

            summary_text += (
                    f"\n3. **病人患多个病的情况**\n"
                    f"   - 见病人患病统计柱状图\n"
            )

            # 显示索引最前面的两张直方图
            if len(histogram_paths) >= 2:
                    self.display_image_in_scroll_area(histogram_paths[0], self.scrollArea_7)
                    self.display_image_in_scroll_area(histogram_paths[1], self.scrollArea_4)

            # 在 scrollArea_5 显示统计图表，确保宽度为 1100px
            widget = QWidget()
            layout = QVBoxLayout(widget)

            for img_path in image_paths:
                if os.path.exists(img_path):
                        label = QLabel()
                        pixmap = QPixmap(img_path)

                        if pixmap.isNull():
                                continue  # 如果图片加载失败，跳过当前图片

                        # 调整宽度为 1100 像素，高度按比例缩小
                        target_width = 1100
                        scale_factor = target_width / pixmap.width()
                        target_height = int(pixmap.height() * scale_factor)

                        pixmap = pixmap.scaled(target_width, target_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                        label.setPixmap(pixmap)
                        layout.addWidget(label)  # **确保 label 在 for 循环内被添加**

                # 设置滚动区域的 widget
                widget.setLayout(layout)  # **确保 widget 绑定 layout**
                self.scrollArea_5.setWidget(widget)

            # 显示检测结果到 textEdit
            self.textEdit.setPlainText("\n".join(text_results))

            # 显示统计分析文本到 textEdit_2
            self.textEdit_2.setPlainText(summary_text)

            # 生成报告
            self.create_report(image_paths, output_folder)
            report_path = os.path.join(output_folder, 'classification_report.docx')

            # 停止进度条
            self.stop_progress_bar()

            # 弹窗通知
            QMessageBox.information(None, "完成", f"检测报告已保存至 {report_path}")

    def process_image(self, image_path):
        """处理单张图片并返回预测结果"""
        # 预处理图片
        data_transform = transforms.Compose([
                transforms.Resize((224, 224)),
                transforms.ToTensor(),
                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
        ])

        image = Image.open(image_path)

        # **确保图片是 RGB，防止 RGBA / 灰度图报错**
        if image.mode != 'RGB':
                image = image.convert('RGB')

        image = data_transform(image)
        image = image.unsqueeze(0)  # 增加 batch 维度

        use_gpu = self.radioButton.isChecked()
        device = torch.device("cuda:0" if torch.cuda.is_available() and use_gpu else "cpu")

        # 选择模型
        try:
                model = self.select_model()  # 直接调用 select_model 获取模型实例
        except ValueError as e:
                QtWidgets.QMessageBox.warning(None, "错误", str(e))
                return

        image = image.to(device)
        model.to(device)

        # 使用模型进行预测
        with torch.no_grad():
                outputs = model(image)
                probabilities = torch.sigmoid(outputs).cpu().numpy().flatten()

        # 根据阈值进行判断
        class_names = ['A', 'C', 'D', 'G', 'H', 'M', 'N', 'O']
        threshold = self.horizontalSlider.value() / 100
        result_classes = []
        max_probability = 0
        max_class = None

        for class_name, probability in zip(class_names, probabilities):
                if probability > max_probability:
                        max_probability = probability
                max_class = class_name
                if probability > threshold:
                        result_classes.append(class_name)

        return result_classes, probabilities

    def analyze_image(self, image_path, probabilities, output_folder):
            """生成柱状图并保存"""
            class_names = ['A', 'C', 'D', 'G', 'H', 'M', 'N', 'O']

            fig, ax = plt.subplots(figsize=(10, 6))

            # 使用tab20色板给每个柱子设置不同的颜色
            colors = plt.cm.tab20.colors[:len(class_names)]

            # 绘制柱状图
            bars = ax.bar(class_names, probabilities, color=colors)

            # 在每个柱子上方标注概率大小
            for bar in bars:
                    yval = bar.get_height()
                    ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.02, f'{yval:.4f}', ha='center', va='bottom',
                            fontsize=10)

            # 移除Y轴
            ax.set_yticks([])

            # 设置y轴范围为[0, 1]
            ax.set_ylim(0, 1)

            # 保存柱状图到文件夹
            # 柱状图保存到lineEdit_15显示的路径中
            result_img_path = os.path.join(output_folder,
                                           f"{os.path.basename(image_path).split('.')[0]}_probabilities.png")
            os.makedirs(os.path.dirname(result_img_path), exist_ok=True)  # 确保文件夹存在
            plt.savefig(result_img_path)
            plt.close(fig)  # 关闭当前figure

            print(f"柱状图保存到: {result_img_path}")

            return result_img_path

    def generate_summary_chart1(self, normal_count, sick_count, total_count, output_folder):
            """生成统计柱状图和雷达图并保存"""
            fig, ax = plt.subplots(1, 1, figsize=(10, 10))

            # 数据
            categories = ['正常', '得病', '总人数']
            counts = [normal_count, sick_count, total_count]

            # 绘制柱状图
            bars = ax.bar(categories, counts, color=['green', 'red', 'blue'])

            # 在每个柱子上方标注数量
            for bar in bars:
                    yval = bar.get_height()
                    ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.2, f'{yval}', ha='center', va='bottom',
                            fontsize=12)

            # 设置y轴范围
            ax.set_ylim(0, max(counts) + 5)
            ax.set_title('Patient Count Bar Chart')

            # 保存图表到文件夹
            # 图表保存到lineEdit_15显示的路径中
            summary_img_path = os.path.join(output_folder, "summary_chart.png")
            plt.savefig(summary_img_path)
            plt.close(fig)  # 关闭当前figure

            print(f"统计柱状图和雷达图保存到: {summary_img_path}")

    def generate_summary_chart2(self, class_counts, output_folder):
            """生成8个类的统计柱状图和雷达图并保存"""
            fig, ax = plt.subplots(1, 2, figsize=(20, 10))

            class_names = ['A', 'C', 'D', 'G', 'H', 'M', 'N', 'O']
            # 数据
            categories = class_names
            counts = [class_counts[class_name] for class_name in class_names]

            # 绘制柱状图
            bars = ax[0].bar(categories, counts, color=plt.cm.tab20.colors[:len(class_names)])

            # 在每个柱子上方标注数量
            for bar in bars:
                    yval = bar.get_height()
                    ax[0].text(bar.get_x() + bar.get_width() / 2, yval + 0.2, f'{yval}', ha='center', va='bottom',
                               fontsize=12)

            # 设置y轴范围
            ax[0].set_ylim(0, max(counts) + 5)
            ax[0].set_title('Bar Chart of Various Eye Diseases')

            # 生成雷达图数据
            stats = np.array(counts) / sum(counts)

            # 绘制雷达图
            angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
            stats = np.concatenate((stats, [stats[0]]))
            angles += angles[:1]

            ax[1] = plt.subplot(122, polar=True)
            ax[1].set_theta_offset(np.pi / 2)
            ax[1].set_theta_direction(-1)
            ax[1].set_rlabel_position(0)

            ax[1].plot(angles, stats, color='blue', linewidth=2, linestyle='solid')
            ax[1].fill(angles, stats, color='blue', alpha=0.25)
            ax[1].set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
            ax[1].set_yticklabels(['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])
            ax[1].set_xticks(angles[:-1])
            ax[1].set_xticklabels(categories)
            ax[1].set_title('Radar Chart of Various Eye Diseases')

            # 保存图表到文件夹
            # 图表保存到lineEdit_15显示的路径中
            summary_img_path = os.path.join(output_folder, "class_summary_chart.png")
            plt.savefig(summary_img_path)
            plt.close(fig)  # 关闭当前figure

            print(f"各类统计柱状图和雷达图保存到: {summary_img_path}")

    def generate_summary_chart3(self, image_groups, class_names, output_folder):
            """生成病人患多个病的人数统计柱状图和雷达图并保存"""
            # 统计每个病的病人数
            disease_counts = {class_name: 0 for class_name in class_names if class_name != 'N'}

            for number, paths in image_groups.items():
                    left_eye_classes = set()
                    right_eye_classes = set()

                    for image_path in paths:
                            result_classes, _ = self.process_image(image_path)
                            if '_left' in image_path:
                                    left_eye_classes.update(result_classes)
                            elif '_right' in image_path:
                                    right_eye_classes.update(result_classes)

                    # 合并左右眼的结果
                    combined_classes = left_eye_classes.union(right_eye_classes)
                    if 'N' in combined_classes:
                            combined_classes.remove('N')

                    for class_name in combined_classes:
                            disease_counts[class_name] += 1

            # 绘制柱状图
            fig, ax = plt.subplots(1, 2, figsize=(20, 10))

            categories = list(disease_counts.keys())
            counts = list(disease_counts.values())

            bars = ax[0].bar(categories, counts, color=plt.cm.tab20.colors[:len(categories)])

            # 在每个柱子上方标注数量
            for bar in bars:
                    yval = bar.get_height()
                    ax[0].text(bar.get_x() + bar.get_width() / 2, yval + 0.2, f'{yval}', ha='center', va='bottom',
                               fontsize=12)

            # 设置y轴范围
            ax[0].set_ylim(0, max(counts) + 5)
            ax[0].set_title('Bar Chart of Patients with Multiple Diseases')

            # 生成雷达图数据
            stats = np.array(counts) / sum(counts)

            # 绘制雷达图
            angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
            stats = np.concatenate((stats, [stats[0]]))
            angles += angles[:1]

            ax[1] = plt.subplot(122, polar=True)
            ax[1].set_theta_offset(np.pi / 2)
            ax[1].set_theta_direction(-1)
            ax[1].set_rlabel_position(0)

            ax[1].plot(angles, stats, color='blue', linewidth=2, linestyle='solid')
            ax[1].fill(angles, stats, color='blue', alpha=0.25)
            ax[1].set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
            ax[1].set_yticklabels(['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])
            ax[1].set_xticks(angles[:-1])
            ax[1].set_xticklabels(categories)
            ax[1].set_title('Proportion of Patients with Multiple Diseases (Radar Chart)')

            # 保存图表到文件夹
            # 图表保存到lineEdit_15显示的路径中 并显示在scrollArea_5中
            summary_img_path = os.path.join(output_folder, "disease_summary_chart.png")
            plt.savefig(summary_img_path)
            plt.close(fig)  # 关闭当前figure

            print(f"病人患多个病的统计柱状图和雷达图保存到: {summary_img_path}")

    def create_report(self, image_paths, output_folder):
            """生成Word报告"""
            # 创建Document对象
            doc = Document()
            doc.add_heading('图片分类报告', 0)

            # 统计正常和得病人数
            normal_count = 0
            sick_count = 0

            # 统计各类的数量
            class_names = ['A', 'C', 'D', 'G', 'H', 'M', 'N', 'O']
            class_counts = {class_name: 0 for class_name in class_names}

            # 按编号分组图片路径
            image_groups = {}
            for image_path in image_paths:
                    base_name = os.path.basename(image_path)
                    number = base_name.split('_')[0]
                    if number not in image_groups:
                            image_groups[number] = []
                    image_groups[number].append(image_path)

            total_groups = len(image_groups)
            processed_groups = 0

            # 启动定时器来更新进度条
            self.set_loader()
            self.current_progress_bar = 3  # 设置为 progressBar_3
            self.progressBar_3.setValue(0)  # 重置进度条

            # 处理每组图片
            for number, paths in image_groups.items():
                    print(f"正在处理编号为 {number} 的图片组")

                    group_results = []
                    for image_path in paths:
                            print(f"正在处理图片: {image_path}")

                            # 获取预测结果
                            result_classes, probabilities = self.process_image(image_path)
                            group_results.append(('N' in result_classes, image_path, probabilities))

                            # 统计各类的数量
                            for class_name in result_classes:
                                    class_counts[class_name] += 1

                    # 判断该组是否正常
                    if all(result[0] for result in group_results):
                            normal_count += 1
                    else:
                            sick_count += 1

                    # 更新进度条
                    processed_groups += 1
                    progress = int((processed_groups / total_groups) * 100)
                    self.progressBar_3.setValue(progress)
                    QtWidgets.QApplication.processEvents()  # 立即刷新界面

            # 生成统计柱状图和雷达图
            self.generate_summary_chart1(normal_count, sick_count, len(image_groups), output_folder)
            self.generate_summary_chart2(class_counts, output_folder)
            self.generate_summary_chart3(image_groups, class_names, output_folder)

            # 将生成的图表添加到Word文档中
            doc.add_heading('统计图表', level=1)

            summary_chart1_path = os.path.join(output_folder, "summary_chart.png")
            class_summary_chart_path = os.path.join(output_folder, "class_summary_chart.png")
            disease_summary_chart_path = os.path.join(output_folder, "disease_summary_chart.png")

            doc.add_heading('人数统计柱状图和雷达图', level=2)
            table = doc.add_table(rows=1, cols=2)
            table.autofit = False
            table.columns[0].width = Inches(3)
            table.columns[1].width = Inches(3)

            # 在左侧单元格中添加图片
            cell = table.cell(0, 0)
            cell.paragraphs[0].add_run().add_picture(summary_chart1_path, width=Inches(2.7))

            # 在右侧单元格中添加描述性文字
            threshold = self.horizontalSlider.value() / 100
            cell = table.cell(0, 1)
            cell.paragraphs[0].add_run(f"阈值设置: {threshold}\n")
            cell.paragraphs[0].add_run("各组的含义:\n")
            cell.paragraphs[0].add_run("A: AMD\n")
            cell.paragraphs[0].add_run("C: 白内障\n")
            cell.paragraphs[0].add_run("D: 糖尿病\n")
            cell.paragraphs[0].add_run("G: 青光眼\n")
            cell.paragraphs[0].add_run("H: 高血压\n")
            cell.paragraphs[0].add_run("M: 近视\n")
            cell.paragraphs[0].add_run("N: 正常\n")
            cell.paragraphs[0].add_run("O: 异常\n")

            doc.add_heading('各类统计柱状图和雷达图', level=2)
            doc.add_picture(class_summary_chart_path, width=Inches(6))

            doc.add_heading('病人患多个病的统计柱状图和雷达图', level=2)
            doc.add_picture(disease_summary_chart_path, width=Inches(6))

            # 处理每组图片
            for number, paths in image_groups.items():
                    print(f"正在处理编号为 {number} 的图片组")

                    group_results = []
                    left_eye_result = None
                    right_eye_result = None

                    for image_path in paths:
                            print(f"正在处理图片: {image_path}")

                            # 获取预测结果
                            result_classes, probabilities = self.process_image(image_path)
                            group_results.append(('N' in result_classes, image_path, probabilities))

                            # 判断左右眼
                            if '_left' in image_path:
                                    left_eye_result = (image_path, result_classes, probabilities)
                            elif '_right' in image_path:
                                    right_eye_result = (image_path, result_classes, probabilities)

                    # 添加编号标题
                    doc.add_heading(f"编号: {number}", level=1)

                    # 添加左眼和右眼图片及柱状图
                    table = doc.add_table(rows=2, cols=4)
                    table.autofit = False

                    for row in table.rows:
                            for cell in row.cells:
                                    cell.width = Inches(1.5)
                                    cell.vertical_alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    if left_eye_result:
                            left_image_path, left_classes, left_probabilities = left_eye_result
                            left_result_img_path = self.analyze_image(left_image_path, left_probabilities,
                                                                      output_folder)
                            table.cell(0, 0).paragraphs[0].add_run().add_picture(left_image_path, width=Inches(1.2))
                            table.cell(0, 0).paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                            table.cell(0, 1).paragraphs[0].add_run().add_picture(left_result_img_path,
                                                                                 width=Inches(1.2))
                            table.cell(0, 1).paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                            table.cell(1, 0).paragraphs[0].add_run(f"左眼状况: {', '.join(left_classes)}")
                            table.cell(1, 1).paragraphs[0].add_run("左眼柱状图")

                    if right_eye_result:
                            right_image_path, right_classes, right_probabilities = right_eye_result
                            right_result_img_path = self.analyze_image(right_image_path, right_probabilities,
                                                                       output_folder)
                            table.cell(0, 2).paragraphs[0].add_run().add_picture(right_image_path, width=Inches(1.2))
                            table.cell(0, 2).paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                            table.cell(0, 3).paragraphs[0].add_run().add_picture(right_result_img_path,
                                                                                 width=Inches(1.2))
                            table.cell(0, 3).paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                            table.cell(1, 2).paragraphs[0].add_run(f"右眼状况: {', '.join(right_classes)}")
                            table.cell(1, 3).paragraphs[0].add_run("右眼柱状图")

            # 保存Word文档
            # 图表保存到lineEdit_15显示的路径中 并添加显示在scrollArea_5中
            doc.save(output_folder + "/report.docx")
            print(f"所有图像和柱状图已成功保存到Word报告: {output_folder}")
            self.progressBar_3.setValue(100)
            self.stop_progress_bar()  # 停止进度条更新

    # 预处理部分
    def crop_image(self, img, debug=0):
            """ 根据背景裁剪图片 """
            ba = np.array(img)
            h, w, _ = ba.shape
            if debug > 0:
                    print("h=%d, w=%d" % (h, w))

            if w > 1.2 * h:
                    left_max = ba[:, : w // 8, :].max(axis=(0, 1)).astype(int)
                    right_max = ba[:, - w // 8:, :].max(axis=(0, 1)).astype(int)
                    max_bg = np.maximum(left_max, right_max)
                    foreground = (ba > max_bg + 5).astype(np.uint8)
                    bbox = Image.fromarray(foreground).getbbox()

                    if debug > 0:
                            print(f"BBox: {bbox}")

                    if bbox is None:
                            return img  # 无有效裁剪区域，返回原图
                    else:
                            left, upper, right, lower = bbox
                            bbox_width = right - left
                            bbox_height = lower - upper
                            if bbox_width < 0.8 * h or bbox_height < 0.8 * h:
                                    return img  # bbox 太小，返回原图
                            else:
                                    return img.crop(bbox)  # 返回裁剪后的图像
            else:
                    return img  # 宽度不满足裁剪条件，返回原图

    def on_pushButton_15_clicked(self):  # 预处理按钮
            """ 处理图片并显示前两张 """
            input_folder = self.lineEdit.text().strip()
            output_folder = self.lineEdit_16.text().strip()

            if not os.path.exists(input_folder) or not os.path.exists(output_folder):
                    QMessageBox.warning(None, "错误", "输入或输出文件夹路径无效！")
                    return

            selected_button = self.button_group_3.checkedButton()
            self.selected_method = self.processing_methods.get(selected_button, rgb_gaussian)

            image_formats = (".jpg", ".jpeg", ".png", ".bmp", ".gif")
            image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(image_formats)]

            if not image_files:
                    QMessageBox.warning(None, "错误", "源文件夹没有图片！")
                    return

            self.processed_files = []
            self.progressBar_5.setMaximum(len(image_files))
            self.progressBar_5.setValue(0)

            # 按照文件名中的数字排序
            image_files.sort(key=lambda x: int(re.search(r'(\d+)', x).group(1)) if re.search(r'(\d+)', x) else -1)

            for img_file in image_files:
                    img_path = os.path.join(input_folder, img_file)
                    save_path = os.path.join(output_folder, img_file)

                    try:
                            img = Image.open(img_path).convert('RGB')  # 打开图像并转换为 RGB
                            img_cropped = self.crop_image(img, debug=1)  # 先执行裁剪
                            img_processed = self.selected_method(img_cropped)  # 应用选定的预处理方法
                            img_processed.save(save_path)  # 保存处理后的图像

                            self.processed_files.append(save_path)
                            self.progressBar_5.setValue(len(self.processed_files))
                            QApplication.processEvents()
                    except Exception as e:
                            print(f"Failed to process {img_path}: {e}")

            QMessageBox.information(None, "完成", "图片处理完成！")
            self.display_processed_images()

    def display_processed_images(self):
        """ 显示前两张处理后的图片 """
        if not self.processed_files:
                return
        self.processed_index = 0
        self.update_scroll_areas2()

    def on_pushButton_13_clicked(self):  # 向前切换 2 张
            # 先注释掉，等待后续实现
            if not hasattr(self, 'processed_files') or not self.processed_files:
                    QMessageBox.warning(None, "提示", "请先进行预处理操作")
                    return

            # 检查 scrollArea_3 和 scrollArea_6 中是否有图片
            if not self.scrollArea_3.widget() or not self.scrollArea_6.widget():
                    QMessageBox.warning(None, "提示", "请先进行预处理操作")
                    return

            total_images = len(self.processed_files)
            self.processed_index = (self.processed_index - 2) % total_images  # 向前切换2张
            self.update_scroll_areas1()
            self.update_scroll_areas2()
            self.update_text_results()

    def on_pushButton_14_clicked(self):  # 向后切换 2 张
            # 先注释掉，等待后续实现
            if not hasattr(self, 'processed_files') or not self.processed_files:
                    QMessageBox.warning(None, "提示", "请先进行预处理操作")
                    return

            # 检查 scrollArea_3 和 scrollArea_6 中是否有图片
            if not self.scrollArea_3.widget() or not self.scrollArea_6.widget():
                    QMessageBox.warning(None, "提示", "请先进行预处理操作")
                    return

            total_images = len(self.processed_files)
            self.processed_index = (self.processed_index + 2) % total_images  # 向后切换2张
            self.update_scroll_areas1()
            self.update_scroll_areas2()
            self.update_text_results()

    def update_scroll_areas1(self):
        """ 更新 UI，显示当前索引的柱状图 """
        if not self.processed_files:
                return

        total_images = len(self.processed_files)
        index1 = self.processed_index
        index2 = (self.processed_index + 1) % total_images

        # 直接指定输出文件夹路径
        self.output_folder = self.lineEdit_15.text()  # 假设有一个 QLineEdit 存储路径

        # 获取当前图片的预测概率
        probabilities1 = self.process_image(self.processed_files[index1])[1]  # 获取当前图片的预测概率
        probabilities2 = self.process_image(self.processed_files[index2])[1]  # 获取第二张图片的预测概率

        # 生成柱状图并保存
        result_img_path1 = self.analyze_image(self.processed_files[index1], probabilities1, self.output_folder)
        result_img_path2 = self.analyze_image(self.processed_files[index2], probabilities2, self.output_folder)

        # 显示柱状图到 scrollArea_7 和 scrollArea_4
        self.display_image_in_scroll_area(result_img_path1, self.scrollArea_7)
        if total_images > 1:
                self.display_image_in_scroll_area(result_img_path2, self.scrollArea_4)


    def update_scroll_areas2(self):
            """ 更新 UI，显示当前索引的眼底图像 """
            if not self.processed_files:
                    return

            total_images = len(self.processed_files)
            index1 = self.processed_index
            index2 = (self.processed_index + 1) % total_images

            # 显示柱状图到 scrollArea_7 和 scrollArea_4
            self.display_image_in_scroll_area(self.processed_files[index1], self.scrollArea_3)
            if total_images > 1:
                    self.display_image_in_scroll_area(self.processed_files[index2], self.scrollArea_6)

    def update_text_results(self):
            """更新文本框中的检测结果"""
            if not hasattr(self, 'text_results') or not self.text_results:
                    return

            # 获取当前索引对应的检测结果
            total_images = len(self.text_results)
            index1 = self.processed_index
            index2 = (self.processed_index + 1) % total_images

            # 设置 textEdit 中显示的文本
            result_text = self.text_results[index1]
            if total_images > 1:
                    result_text += "\n" + self.text_results[index2]

            self.textEdit.setPlainText(result_text)

    def display_image_in_scroll_area(self, image_path, scroll_area):
            """ 在指定的 scrollArea 中显示图片 """
            if not os.path.exists(image_path):
                    return

            image_label = QLabel()
            pixmap = QPixmap(image_path)
            image_label.setPixmap(pixmap.scaled(scroll_area.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

            layout = scroll_area.layout()
            if layout:
                    for i in range(layout.count()):
                            item = layout.itemAt(i)
                            if item is not None:
                                    item.widget().deleteLater()
            else:
                    scroll_area.setLayout(QVBoxLayout())

            file_name_label = QLabel(os.path.basename(image_path))
            file_name_label.setAlignment(Qt.AlignCenter)
            file_name_label.setStyleSheet("background-color: white;")

            layout = scroll_area.layout()
            layout.addWidget(image_label)
            layout.addWidget(file_name_label)

            # 阈值显示数值

    def update_label_19(self, value):  # 阈值数值显示
            scaled_value = value * 0.01  # 乘以 0.01
            self.label_19.setText(f"{scaled_value:.2f}")  # 保留两位小数

    def on_pushButton_clicked(self):
            # 获取 lineEdit_15, lineEdit_16, lineEdit_17 的文本内容
            file_paths = {
                    "预处理结果路径": self.lineEdit_16.text().strip(),
                    "疾病检测报告路径": self.lineEdit_15.text().strip(),
                    "模型保存路径": self.lineEdit_17.text().strip()
            }

            # 检查无效路径
            invalid_paths = {name: path for name, path in file_paths.items() if not path or not os.path.exists(path)}

            # 如果有无效路径，弹出错误提示并返回
            if invalid_paths:
                    error_message = "以下路径无效:\n" + "\n".join(
                            [f"{name} {path}" for name, path in invalid_paths.items()])
                    QtWidgets.QMessageBox.warning(None, "错误", error_message)
                    return

            # 如果所有路径都有效，进行保存
            saved_data = file_paths

            # 显示保存成功提示
            QtWidgets.QMessageBox.information(None, "保存成功", "文件路径已成功保存！")

    def on_pushButton_3_clicked(self):
            # 打开文件夹选择对话框
            folder_path = QFileDialog.getExistingDirectory(None, "选择文件夹")
            if folder_path:
                    self.lineEdit.setText(folder_path)  # 显示路径到lineEdit

    def on_pushButton_4_clicked(self):
            folder_path = self.lineEdit.text()
            if not folder_path or not os.path.isdir(folder_path):
                    QtWidgets.QMessageBox.warning(None, "错误", "请选择有效的文件夹！")
                    return

            # 获取文件夹内的图片文件
            image_formats = [".jpg", ".jpeg", ".png", ".bmp", ".gif"]
            files = os.listdir(folder_path)
            image_files = [f for f in files if any(f.lower().endswith(ext) for ext in image_formats)]

            if not image_files:
                    QtWidgets.QMessageBox.warning(None, "错误", "该文件夹不包含任何图片！")
                    return

            # 设置进度条最大值
            self.progressBar.setMaximum(len(image_files))
            self.progressBar.setValue(0)  # 初始化进度条为0

            # 设置当前正在更新的进度条标识
            self.current_progress_bar = 1  # 设置为1表示更新 progressBar_1

            # 启动定时器进行进度条更新
            self.set_loader()

            # 开始检测图片
            for i, image in enumerate(image_files):
                    QtCore.QThread.msleep(5)  # 模拟处理时间
                    self.progressBar.setValue(i + 1)  # 更新进度条

            QtWidgets.QMessageBox.information(None, "成功", "文件夹检测完成！")


    def on_pushButton_5_clicked(self):
            # 弹出文件选择对话框，选择图片文件
            image_path, _ = QFileDialog.getOpenFileName(None, "选择图片", "",
                                                        "图片文件 (*.png *.jpg *.jpeg *.bmp *.gif)")
            if image_path:
                    self.lineEdit_3.setText(image_path)
                    self.display_image_in_scroll_area(image_path, self.scrollArea)

    def on_pushButton_16_clicked(self):
            # 弹出文件选择对话框，选择图片文件
            image_path, _ = QFileDialog.getOpenFileName(None, "选择图片", "",
                                                        "图片文件 (*.png *.jpg *.jpeg *.bmp *.gif)")
            if image_path:
                    self.lineEdit_5.setText(image_path)
                    self.display_image_in_scroll_area(image_path, self.scrollArea_2)

    def on_pushButton_6_clicked(self):
            """ 启动进度条2，并检查图片有效性 """
            image_path = self.lineEdit_3.text()
            if not image_path or not os.path.isfile(image_path):
                    QMessageBox.warning(None, "错误", "请选择有效的图片！")
                    return
            self.set_loader1(self.progressBar_2, image_path)

    def on_pushButton_17_clicked(self):
            """ 启动进度条4，并检查图片有效性 """
            image_path = self.lineEdit_5.text()
            if not image_path or not os.path.isfile(image_path):
                    QMessageBox.warning(None, "错误", "请选择有效的图片！")
                    return
            self.set_loader1(self.progressBar_4, image_path)

    def set_loader1(self, progress_bar, image_path):
            """ 启动 QTimer 更新进度条 """
            self.current_progress = 0
            self.progress_bar = progress_bar
            self.progress_bar.setMaximum(100)
            self.progress_bar.setValue(0)

            self.timer = QTimer()
            self.timer.timeout.connect(lambda: self.update_progress(progress_bar, image_path))
            self.timer.start(10)  # 每 10ms 更新一次

    def update_progress(self, progress_bar, image_path):
            """ 更新进度条，并在完成后检查图片有效性 """
            if self.current_progress < 100:
                    self.current_progress += 1
                    progress_bar.setValue(self.current_progress)
            else:
                    self.timer.stop()
                    image_reader = QImageReader(image_path)
                    if image_reader.canRead():
                            QMessageBox.information(None, "成功", "图片有效！")
                    else:
                            QMessageBox.warning(None, "错误", "该图片文件无效！")

    def stop_progress_bar(self):
            """ 停止进度条更新 """
            if hasattr(self, 'timer') and self.timer.isActive():
                    self.timer.stop()

    def set_loader(self):
            self.timer = QtCore.QTimer()
            self.timer.start(100)  # 定时器每100ms触发一次

    def load_progress_bar(self):  # 进度条样式函数
            # 确保只更新当前标识的进度条
            if self.current_progress_bar == 1:  # 只更新 progressBar_1
                    if self.progressBar.value() < self.progressBar.maximum():
                            self.progressBar.setValue(self.progressBar.value() + 1)

            elif self.current_progress_bar == 3:
                    if self.progressBar_3.value() < self.progressBar_3.maximum():
                            self.progressBar_3.setValue(self.progressBar_3.value() + 1)

            elif self.current_progress_bar == 5:
                    output_folder = self.lineEdit_16.text().strip()
                    image_formats = (".jpg", ".jpeg", ".png", ".bmp", ".gif")
                    # 获取目标文件夹的图片数
                    processed_images = len([f for f in os.listdir(output_folder) if f.lower().endswith(image_formats)])

                    if self.progressBar_5.value() < self.progressBar_5.maximum():
                            self.progressBar_5.setValue(processed_images)

                    if processed_images >= self.progressBar_5.maximum():
                            self.stop_progress_bar()

            else:
                    return  # 没有正在更新的进度条
            self.timer.timeout.connect(self.load_progress_bar)

    def on_pushButton_1_clicked(self):  # tab1 选择保存路径 预处理结果保存路径
            # 打开文件夹选择对话框
            folder_path = QFileDialog.getExistingDirectory(None, "选择文件夹")
            if folder_path:
                    self.lineEdit_16.setText(folder_path)  # 显示路径到lineEdit

    def on_pushButton_20_clicked(self):  # tab2 选择保存路径 疾病检测报告保存路径
            # 打开文件夹选择对话框
            folder_path = QFileDialog.getExistingDirectory(None, "选择文件夹")
            if folder_path:
                    self.lineEdit_15.setText(folder_path)  # 显示路径到lineEdit

    def on_pushButton_2_clicked(self):  # tab2 选择保存路径 参数模型保存路径
            # 打开文件选择对话框，筛选 .pth 文件
            file_path, _ = QFileDialog.getOpenFileName(None, "选择.pth文件", "",
                                                       "PyTorch Model Files (*.pth);;All Files (*)")
            if file_path:
                    self.lineEdit_17.setText(file_path)  # 显示路径到 lineEdit

    @staticmethod
    def get_new_image_path(current_image_path, offset):
            """
            根据当前图片路径，获取文件夹内按数字排序的图片，并计算新的索引返回新图片路径。
            :param current_image_path: 当前图片的完整路径
            :param offset: 向前(-2)或向后(+2)偏移的索引
            :return: 新的图片路径
            """
            if not os.path.exists(current_image_path):
                    return None

            folder_path = os.path.dirname(current_image_path)

            # 获取文件夹中所有图片文件（支持常见格式）
            image_files = [f for f in os.listdir(folder_path) if
                           f.lower().endswith(('png', 'jpg', 'jpeg', 'bmp', 'gif'))]

            # 使用正则表达式从文件名中提取数字部分
            def extract_number(file_name):
                    match = re.search(r'(\d+)', file_name)  # 提取数字部分
                    return int(match.group(1)) if match else -1

            # 按数字排序
            image_files.sort(key=extract_number)

            try:
                    current_index = image_files.index(os.path.basename(current_image_path))
            except ValueError:
                    return None  # 未找到当前图片

            # 计算新的索引（确保索引合法）
            new_index = (current_index + offset) % len(image_files)
            return os.path.join(folder_path, image_files[new_index])

    @staticmethod
    def update_scroll_area(scroll_area, line_edit, new_image_path):
            """
            更新 scrollArea 内的图片和文件名。
            :param scroll_area: 要更新的 scrollArea（左眼 or 右眼）
            :param line_edit: 对应的 QLineEdit（用于显示图片路径）
            :param new_image_path: 新的图片路径
            """
            if not new_image_path or not os.path.isfile(new_image_path):
                    QMessageBox.warning(None, "错误", "未找到新的图片！")
                    return

            # 更新路径
            line_edit.setText(new_image_path)

            # 加载并缩放图片
            pixmap = QPixmap(new_image_path)
            image_label = QLabel()
            image_label.setPixmap(pixmap.scaled(scroll_area.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

            # 清空 scrollArea 的旧内容
            layout = scroll_area.layout()
            if layout is None:
                    scroll_area.setLayout(QVBoxLayout())
                    layout = scroll_area.layout()

            while layout.count():
                    item = layout.takeAt(0)
                    if item.widget():
                            item.widget().deleteLater()

            # 添加新的图片和文件名
            layout.addWidget(image_label)

            file_name_label = QLabel(os.path.basename(new_image_path))
            file_name_label.setAlignment(Qt.AlignCenter)
            file_name_label.setStyleSheet("background-color: white;")
            layout.addWidget(file_name_label)

    def on_pushButton_7_clicked(self):  # 预处理上一组
            """
            左右眼各向前 2 个索引，显示不同的图片
            """
            left_new_path = self.get_new_image_path(self.lineEdit_3.text(), (-2))
            right_new_path = self.get_new_image_path(self.lineEdit_5.text(), (-2))

            self.update_scroll_area(self.scrollArea, self.lineEdit_3, left_new_path)
            self.update_scroll_area(self.scrollArea_2, self.lineEdit_5, right_new_path)

    def on_pushButton_8_clicked(self):  # 预处理下一组
            """
            左右眼各向后 2 个索引，显示不同的图片
            """
            left_new_path = self.get_new_image_path(self.lineEdit_3.text(), 2)
            right_new_path = self.get_new_image_path(self.lineEdit_5.text(), 2)

            self.update_scroll_area(self.scrollArea, self.lineEdit_3, left_new_path)
            self.update_scroll_area(self.scrollArea_2, self.lineEdit_5, right_new_path)


    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "MainWindow"))
        self.textBrowser_2.setHtml(_translate("mainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600;\">基于眼底医学影像的眼科疾病智能诊断系统</span></p></body></html>"))
        self.pushButton_7.setText(_translate("mainWindow", " 上一组"))
        self.pushButton_8.setText(_translate("mainWindow", "下一组"))
        self.pushButton_3.setText(_translate("mainWindow", "打开文件夹"))
        self.pushButton_4.setText(_translate("mainWindow", "检测此文件夹"))
        self.pushButton_5.setText(_translate("mainWindow", "打开左眼图片"))
        self.pushButton_6.setText(_translate("mainWindow", "检测此图片"))
        self.pushButton_16.setText(_translate("mainWindow", "打开右眼图片"))
        self.pushButton_17.setText(_translate("mainWindow", "检测此图片"))
        self.pushButton_15.setText(_translate("mainWindow", "图像预处理"))
        self.label_14.setText(_translate("mainWindow", " 预处理进度："))
        self.label.setText(_translate("mainWindow", " 初次使用模型需预热，请耐心等待！"))
        self.label_2.setText(_translate("mainWindow", "左眼图片"))
        self.label_3.setText(_translate("mainWindow", "右眼图片"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("mainWindow", "预处理区域"))
        self.label_5.setText(_translate("mainWindow", " 检测进度："))
        self.label_4.setText(_translate("mainWindow", " 初次使用模型需预热，请耐心等待！"))
        self.label_8.setText(_translate("mainWindow", "预处理后左眼图片"))
        self.label_16.setText(_translate("mainWindow", "左眼疾病状况概率"))
        self.label_15.setText(_translate("mainWindow", "预处理后右眼图片"))
        self.label_17.setText(_translate("mainWindow", "右眼疾病状况概率"))
        self.label_18.setText(_translate("mainWindow", "疾病检测报告"))
        self.pushButton_13.setText(_translate("mainWindow", " 上一组"))
        self.pushButton_14.setText(_translate("mainWindow", "下一组"))
        self.pushButton_19.setText(_translate("mainWindow", "检测疾病"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("mainWindow", "眼部疾病检测区"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("mainWindow", "数据分析区"))
        self.groupBox_2.setTitle(_translate("mainWindow", "保存路径设置"))
        self.pushButton.setText(_translate("mainWindow", "保存"))
        self.label_13.setText(_translate("mainWindow", "参数模型保存路径："))
        self.pushButton_2.setText(_translate("mainWindow", "打开保存路径"))
        self.label_6.setText(_translate("mainWindow", "疾病检测报告保存路径："))
        self.pushButton_20.setText(_translate("mainWindow", "打开保存路径"))
        self.label_7.setText(_translate("mainWindow", "预处理结果保存路径："))
        self.pushButton_1.setText(_translate("mainWindow", "打开保存路径"))
        self.groupBox.setTitle(_translate("mainWindow", "模型参数设置"))
        self.label_9.setText(_translate("mainWindow", "使用GPU：（目前仅支持使用GPU）"))
        self.radioButton.setText(_translate("mainWindow", "是"))
        self.radioButton_2.setText(_translate("mainWindow", "否"))
        self.label_11.setText(_translate("mainWindow", "模型大小："))
        self.radioButton_3.setText(_translate("mainWindow", "Tiny"))
        self.radioButton_4.setText(_translate("mainWindow", "Small"))
        self.radioButton_5.setText(_translate("mainWindow", "Base"))
        self.label_10.setText(_translate("mainWindow", "检测结果输出阈值："))
        self.label_19.setText(_translate("mainWindow", "22222222"))
        self.label_12.setText(_translate("mainWindow", "预处理方式："))
        self.radioButton_9.setText(_translate("mainWindow", "只裁切尺寸"))
        self.radioButton_8.setText(_translate("mainWindow", "RGB+CLAHE"))
        self.radioButton_10.setText(_translate("mainWindow", "RGB+高斯卷积"))
        self.radioButton_11.setText(_translate("mainWindow", "RGB+高斯卷积+CLAHE"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("mainWindow", "设置区"))

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.setWindowIcon(QIcon("./eye-check.jpg"))
    mainWindow.setWindowTitle("眼康智测——基于眼底医学影像的眼科疾病智能诊断系统")
    mainWindow.show()
    sys.exit(app.exec_())